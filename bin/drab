#!/usr/bin/env ruby
require "gli"
require "drab"

include GLI::App

program_desc "Faggier iTerm tabs"

version Drab::VERSION

subcommand_option_handling :normal
arguments :strict
sort_help :manually

desc "Save this color for the current directory"
switch [:s, :save]

desc "Get a saved color and set it in the current shell"
command :get do |c|
  c.action do |global, options, args|
    color = Drab::Config[Dir.pwd]
    color.set! if color
  end
end

desc "Set an RGB color for the current tab"
arg_name "Specify an RGB color"
command :rgb do |c|
  # c.desc "Red value"
  # c.default_value 0
  # c.arg_name "red"
  # c.flag [:r, :red]

  # c.desc "Green value"
  # c.default_value 0
  # c.arg_name "green"
  # c.flag [:g, :green]

  # c.desc "Blue value"
  # c.default_value 0
  # c.arg_name "blue"
  # c.flag [:b, :blue]

  # c.desc "Hex value"
  # c.default_value "ffff"
  # c.arg_name "hex"
  # c.flag [:h, :hex]

  c.action do |global, options, args|
    color = Drab::Color.new(args)
    color.set!
  end
end

desc "Set a hexadecimal color for the current tab"
arg_name "Specify a hexadecimal color"
command :hex do |c|
  c.action do |global, _options, args|
    color = Drab::Color.from_hex(args.first)
    color.set!
    color.save! if global[:save]
  end
end

desc "Reset the color for the current tab"
command :reset do |c|
  c.action do |global, options, args|
    system "echo", "-n", %Q(\033]6;1;bg;*;default\a)
  end
end

pre do |global, command, options, args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global, command, options, args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
