#!/usr/bin/env ruby
require 'gli'

include GLI::App

program_desc 'Faggier iTerm tabs'

version Drab::VERSION

subcommand_option_handling :normal
arguments :strict
sort_help :manually

desc 'Save this color for the current directory'
switch [:s, :save]

desc 'Set an RGB color for the current tab'
arg_name 'Specify an RGB color'
command :rgb do |c|
  # c.desc 'Red value'
  # c.default_value 0
  # c.arg_name 'red'
  # c.flag [:r, :red]

  # c.desc 'Green value'
  # c.default_value 0
  # c.arg_name 'green'
  # c.flag [:g, :green]

  # c.desc 'Blue value'
  # c.default_value 0
  # c.arg_name 'blue'
  # c.flag [:b, :blue]

  # c.desc 'Hex value'
  # c.default_value "ffff"
  # c.arg_name 'hex'
  # c.flag [:h, :hex]

  c.action do |global, options, args|
    system "echo", "-n", %Q(\033]6;1;bg;red;brightness;#{args[0]}\a)
    system "echo", "-n", %Q(\033]6;1;bg;green;brightness;#{args[1]}\a)
    system "echo", "-n", %Q(\033]6;1;bg;blue;brightness;#{args[2]}\a)

    # If you have any errors, just raise them
    # raise "that command made no sense"
    puts "rgb command ran"
  end
end

desc 'Reset the color for the current tab'
command :reset do |c|
  c.action do |global, options, args|
    system "echo", "-n", %Q(\033]6;1;bg;*;default\a)
  end
end

pre do |global, command, options, args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global, command, options, args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
